// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: step6.proto

//package generated6.protocol;

package generated6

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Step6RPC_Save_FullMethodName      = "/generated6.Step6RPC/Save"
	Step6RPC_GetLast10_FullMethodName = "/generated6.Step6RPC/GetLast10"
)

// Step6RPCClient is the client API for Step6RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Step6RPCClient interface {
	Save(ctx context.Context, in *MyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLast10(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MyMessageList, error)
}

type step6RPCClient struct {
	cc grpc.ClientConnInterface
}

func NewStep6RPCClient(cc grpc.ClientConnInterface) Step6RPCClient {
	return &step6RPCClient{cc}
}

func (c *step6RPCClient) Save(ctx context.Context, in *MyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Step6RPC_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *step6RPCClient) GetLast10(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MyMessageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyMessageList)
	err := c.cc.Invoke(ctx, Step6RPC_GetLast10_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Step6RPCServer is the server API for Step6RPC service.
// All implementations must embed UnimplementedStep6RPCServer
// for forward compatibility.
type Step6RPCServer interface {
	Save(context.Context, *MyMessage) (*emptypb.Empty, error)
	GetLast10(context.Context, *emptypb.Empty) (*MyMessageList, error)
	mustEmbedUnimplementedStep6RPCServer()
}

// UnimplementedStep6RPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStep6RPCServer struct{}

func (UnimplementedStep6RPCServer) Save(context.Context, *MyMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedStep6RPCServer) GetLast10(context.Context, *emptypb.Empty) (*MyMessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLast10 not implemented")
}
func (UnimplementedStep6RPCServer) mustEmbedUnimplementedStep6RPCServer() {}
func (UnimplementedStep6RPCServer) testEmbeddedByValue()                  {}

// UnsafeStep6RPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Step6RPCServer will
// result in compilation errors.
type UnsafeStep6RPCServer interface {
	mustEmbedUnimplementedStep6RPCServer()
}

func RegisterStep6RPCServer(s grpc.ServiceRegistrar, srv Step6RPCServer) {
	// If the following call pancis, it indicates UnimplementedStep6RPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Step6RPC_ServiceDesc, srv)
}

func _Step6RPC_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Step6RPCServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Step6RPC_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Step6RPCServer).Save(ctx, req.(*MyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Step6RPC_GetLast10_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Step6RPCServer).GetLast10(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Step6RPC_GetLast10_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Step6RPCServer).GetLast10(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Step6RPC_ServiceDesc is the grpc.ServiceDesc for Step6RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Step6RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated6.Step6RPC",
	HandlerType: (*Step6RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Step6RPC_Save_Handler,
		},
		{
			MethodName: "GetLast10",
			Handler:    _Step6RPC_GetLast10_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "step6.proto",
}
